/* Decompiler 54ms, total 631ms, lines 578 */package br.gov.sc.contrato.bean;import java.io.IOException;import java.io.Serializable;import java.math.BigDecimal;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.GregorianCalendar;import java.util.List;import java.util.concurrent.TimeUnit;import javax.annotation.PostConstruct;import javax.annotation.PreDestroy;import javax.faces.application.Application;import javax.faces.application.FacesMessage;import javax.faces.application.ViewHandler;import javax.faces.bean.ManagedBean;import javax.faces.bean.SessionScoped;import javax.faces.bean.ViewScoped;import javax.faces.component.UIViewRoot;import javax.faces.context.ExternalContext;import javax.faces.context.FacesContext;import javax.faces.event.ActionEvent;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpSession;import org.omnifaces.util.Messages;import org.primefaces.event.SelectEvent;import org.primefaces.event.ToggleEvent;import org.primefaces.event.UnselectEvent;import br.gov.sc.cetran.domain.ProcessoCetran;import br.gov.sc.codet.dao.HistoricoProcessoDAO;import br.gov.sc.codet.domain.HistoricoProcessoCODET;import br.gov.sc.contrato.dao.CargoTerceirizadoDAO;import br.gov.sc.contrato.dao.ContratoHistFuncionarioDAO;import br.gov.sc.contrato.dao.ContratoRelacaoDAO;import br.gov.sc.contrato.dao.ContratoTerceirizadoDAO;import br.gov.sc.contrato.dao.EmpresaTerceirizadaDAO;import br.gov.sc.contrato.dao.EventoTerceirizadoDAO;import br.gov.sc.contrato.dao.FuncionarioTerceirizadoDAO;import br.gov.sc.contrato.dao.HistoricoEdicoesContratoDAO;import br.gov.sc.contrato.dao.UserClaimsContratoDAO;import br.gov.sc.contrato.domain.CargoTerceirizado;import br.gov.sc.contrato.domain.ContratoHistFuncionario;import br.gov.sc.contrato.domain.ContratoRelacao;import br.gov.sc.contrato.domain.ContratoTerceirizado;import br.gov.sc.contrato.domain.EmpresaTerceirizada;import br.gov.sc.contrato.domain.EventoTerceirizado;import br.gov.sc.contrato.domain.FuncionarioTerceirizado;import br.gov.sc.contrato.domain.HistoricoEdicoesContrato;import br.gov.sc.contrato.domain.UserClaimsContrato;import br.gov.sc.geapo.domain.MaterialSaida;import br.gov.sc.sgi.dao.CidadeDAO;import br.gov.sc.sgi.dao.PessoaDAO;import br.gov.sc.sgi.dao.SetorDAO;import br.gov.sc.sgi.dao.UnidadeDAO;import br.gov.sc.sgi.domain.Cidade;import br.gov.sc.sgi.domain.PessoaFisica;import br.gov.sc.sgi.domain.Rastreio;import br.gov.sc.sgi.domain.Setor;import br.gov.sc.sgi.domain.Unidade;import br.gov.sc.sgi.domain.Usuario;import util.JSFUtil;@SuppressWarnings("serial")@ManagedBean@SessionScopedpublic class ContratoTerceirizadoBean implements Serializable {	private ContratoRelacao contratoRelacao;	private List<ContratoRelacao> listaContratoRelacoes;	private List<ContratoRelacao> filteredListaContratoRelacoes;	private EventoTerceirizado eventoTerceirizado;	private List<EventoTerceirizado> listaEventosTerceirizados;	private List<EventoTerceirizado> listaEventosTerceirizadosPorFuncionario;	private ContratoHistFuncionario contratoHistFuncionario;	private List<ContratoHistFuncionario> listaHistFuncionarios;	private List<ContratoHistFuncionario> listaHistFuncionariosSubstitutos;	private ContratoTerceirizado contratoTerceirizado;	private List<ContratoTerceirizado> listaContratosTerceirizados;	private List<ContratoTerceirizado> listaContratosTerceirizadosPorContratoEmpresa;	private List<ContratoTerceirizado> listaEmpresasTerceirizadasPorContrato;	private FuncionarioTerceirizado funcionarioSelecionado;	private List<FuncionarioTerceirizado> listaFuncionarios;	private EmpresaTerceirizada empresaTerceirizada;	private List<EmpresaTerceirizada> listaEmpresasTerceirizadas;	private List<UserClaimsContrato> listaUserClaims;	private UserClaimsContrato userClaim;	private Setor setor;	private List<Setor> setores;	private Unidade unidade;	private List<Unidade> unidadesSetorUnidades;	private PessoaFisica pessoa;	private List<Cidade> Cidades;	private List<Unidade> unidades;	private List<CargoTerceirizado> cargos;	private Usuario usuarioLogado;	private int filtro;	private int workingDays = 0;	private boolean mostrarSubstituto;	private boolean mostrarAcoes;	private boolean ciretran;	private boolean citran;	private boolean mostrarModuloParaGerentes;	private List<Date> dataEvento;	private List<Date> dataSubstituto;	private Date dataInicial;	private String dateIni;	private String dateFini;	private Date dataFinal;	private boolean mostrarCamposInconsistencia;	private boolean mostrarDiasePergunta;	private boolean mostrarDiaseHoras;	private boolean mostrarTabelaRelatorioEventos;	private String tipoEvento;	private String nContrato;	private String empresaTerceiriza;	private String setorRelatorio;	private Long neewUnidade;	private FuncionarioTerceirizado substitutoPaginaSubs;	private boolean mostrarFerias;	private boolean mostrarAfastamento;		private boolean soVisualizar;		private ContratoTerceirizado codigoContratoHistorico;	private List<HistoricoEdicoesContrato> historicoEdicoes;	private HistoricoEdicoesContrato historicoEdicao;	@PostConstruct	public void listar() {		try {			System.out.println("AQUI CONTRATOTERCEIRIZADO");			HttpSession sessao = (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);			usuarioLogado = (Usuario) sessao.getAttribute("usuario");			FuncionarioTerceirizadoDAO funcionarioDAO = new FuncionarioTerceirizadoDAO();			ContratoTerceirizadoDAO contratoDAO = new ContratoTerceirizadoDAO();			UserClaimsContratoDAO userClaimDAO = new UserClaimsContratoDAO();			EmpresaTerceirizadaDAO empresaDAO = new EmpresaTerceirizadaDAO();			SetorDAO setorDAO = new SetorDAO();			UnidadeDAO unidadeDAO = new UnidadeDAO();			if (usuarioLogado.getNivelAcesso().getCodigo() == 1) {				ciretran = true;				citran = true;				mostrarAcoes = true;				mostrarModuloParaGerentes = true;				listaFuncionarios = funcionarioDAO.listarPorTodos();				listaContratosTerceirizados = contratoDAO.listarPorOrdemASC();				listaEmpresasTerceirizadas = empresaDAO.listar();				setores = setorDAO.listarSetoresFuncionariosTerceirizados();				unidadesSetorUnidades = unidadeDAO.listar();			}						if (usuarioLogado.getNivelAcesso().getCodigo() == 8) {								soVisualizar = true;								listaEmpresasTerceirizadas = empresaDAO.listar();				listaContratosTerceirizados = contratoDAO.listarPorOrdemASC();				listaFuncionarios = funcionarioDAO.listarPorTodos();				setores = setorDAO.listarSetoresFuncionariosTerceirizados();				unidadesSetorUnidades = unidadeDAO.listar();			}			if (usuarioLogado.getUnidade().getUnidadeNome().contains("CIRETRAN")					|| usuarioLogado.getUnidade().getUnidadeNome().contains("CITRAN")) {				if (usuarioLogado.getNivelAcesso().getNivel().contains("GERÊNCIA")) {					listaUserClaims = userClaimDAO.listarPorUsuarioLogado(usuarioLogado);					userClaim = new UserClaimsContrato();					ArrayList<String> codigosUnidades = new ArrayList<String>();					for (int posicao = 0; posicao < listaUserClaims.size(); posicao++) {						codigosUnidades.add(listaUserClaims.get(posicao).getUnidade().getUnidadeNome());					}					ciretran = true;					citran = true;					mostrarAcoes = false;					mostrarModuloParaGerentes = true;					listaEmpresasTerceirizadas = empresaDAO.listar();					listaFuncionarios = funcionarioDAO.listarPorClaims(codigosUnidades);					listaContratosTerceirizados = contratoDAO.listarPorClaims(codigosUnidades);					setores = setorDAO.listarPorClaims(codigosUnidades);					unidadesSetorUnidades = unidadeDAO.listarPorClaims(codigosUnidades);					// listaContratosTerceirizadosPorContratoEmpresa =					// contratoDAO.listarPorContratoEmpresa();				}			}			if (usuarioLogado.getSetor().getSetorNome().contains("Gerência de Apoio Operacional")					&& usuarioLogado.getNivelAcesso().getNivel().contains("CONTRATO")) {				ciretran = true;				citran = true;				mostrarAcoes = true;				mostrarModuloParaGerentes = true;				listaEmpresasTerceirizadas = empresaDAO.listar();				listaContratosTerceirizados = contratoDAO.listarPorOrdemASC();				listaFuncionarios = funcionarioDAO.listarPorTodos();				setores = setorDAO.listarSetoresFuncionariosTerceirizados();				unidadesSetorUnidades = unidadeDAO.listar();			}									contratoTerceirizado = new ContratoTerceirizado();			pessoa = new PessoaFisica();			contratoRelacao = new ContratoRelacao();			contratoHistFuncionario = new ContratoHistFuncionario();			eventoTerceirizado = new EventoTerceirizado();			mostrarSubstituto = false;			mostrarCamposInconsistencia = false;			mostrarDiasePergunta = false;			mostrarDiaseHoras = false;			filtro = 0;		} catch (RuntimeException var8) {			Messages.addGlobalError("Ocorreu um erro ao tentar listar os Contratos.", new Object[0]);			var8.printStackTrace();		}				codigoContratoHistorico = new ContratoTerceirizado();							}		  public void onRowSelectCodContrato(SelectEvent<ContratoTerceirizado> event) {	      //  FacesMessage msg = new FacesMessage(String.valueOf(event.getObject().getCodigo()));	        //FacesContext.getCurrentInstance().addMessage(null, msg);	        	        System.out.println(event.getObject().getCodigo() + "event.getObject().getCodigo()");	        	        HistoricoEdicoesContratoDAO histDAO = new HistoricoEdicoesContratoDAO();	        historicoEdicoes = histDAO.listarEdicoesPorContrato(event.getObject());	     	    }	  	  public void onRowUnselect(UnselectEvent<ContratoTerceirizado> event) {	        FacesMessage msg = new FacesMessage("Product Unselected", String.valueOf(event.getObject().getCodigo()));	        FacesContext.getCurrentInstance().addMessage(null, msg);	    }	  	  public void excluirHistorico(ActionEvent evento) {			try {				historicoEdicao = (HistoricoEdicoesContrato) evento.getComponent().getAttributes().get("histSelecionado");				HistoricoEdicoesContratoDAO histDAO = new HistoricoEdicoesContratoDAO();								contratoTerceirizado = historicoEdicao.getContrato();								histDAO.excluir(historicoEdicao);				historicoEdicao = new HistoricoEdicoesContrato();								historicoEdicoes = histDAO.listarEdicoesPorContrato(contratoTerceirizado);				Messages.addGlobalInfo("Historico removido com sucesso.");			} catch (RuntimeException erro) {				Messages.addGlobalError("Ocorreu um erro ao tentar excluir o Historico.");				erro.printStackTrace();			}		}	public void listarFuncionariosSubs() {		ContratoHistFuncionarioDAO histDAO = new ContratoHistFuncionarioDAO();		listaHistFuncionariosSubstitutos = histDAO.listarSubs("Substituto");	}	public void ContratoTerceirizadoListas() {		EmpresaTerceirizadaDAO empresaDAO = new EmpresaTerceirizadaDAO();		ContratoTerceirizadoDAO contratoDAO = new ContratoTerceirizadoDAO();		UserClaimsContratoDAO userClaimDAO = new UserClaimsContratoDAO();		// listaContratosTerceirizados = contratoDAO.listarPorContratoEmpresa();		listaEmpresasTerceirizadasPorContrato = empresaDAO.listarPorContratoEmpresa(nContrato);		if (usuarioLogado.getUnidade().getUnidadeNome().contains("CIRETRAN")				|| usuarioLogado.getUnidade().getUnidadeNome().contains("CITRAN")) {			if (usuarioLogado.getNivelAcesso().getNivel().contains("GERÊNCIA")) {				listaUserClaims = userClaimDAO.listarPorUsuarioLogado(usuarioLogado);				userClaim = new UserClaimsContrato();				ArrayList<String> codigosUnidadess = new ArrayList<String>();				for (int posicao = 0; posicao < listaUserClaims.size(); posicao++) {					codigosUnidadess.add(listaUserClaims.get(posicao).getUnidade().getUnidadeNome());				}				listaContratosTerceirizadosPorContratoEmpresa = contratoDAO						.listarPorClaimsNomeEmpresa(codigosUnidadess);			}		}		if (usuarioLogado.getNivelAcesso().getCodigo() == 1) {			listaContratosTerceirizadosPorContratoEmpresa = contratoDAO.listarPorContratoEmpresa();		}		if (usuarioLogado.getSetor().getSetorNome().contains("Gerência de Apoio Operacional")				&& usuarioLogado.getNivelAcesso().getNivel().contains("CONTRATO")) {			listaContratosTerceirizadosPorContratoEmpresa = contratoDAO.listarPorContratoEmpresa();		}		UnidadeDAO unidadeDAO = new UnidadeDAO();		unidades = unidadeDAO.listar();		CidadeDAO cidadeDAO = new CidadeDAO();		Cidades = cidadeDAO.buscarPorEstado(usuarioLogado.getPessoa().getEstadoEndereco().getCodigo());		CargoTerceirizadoDAO cargoDAO = new CargoTerceirizadoDAO();		cargos = cargoDAO.listar();	}	public void salvar() throws Exception {		try {			HttpSession sessao = (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);			usuarioLogado = (Usuario) sessao.getAttribute("usuario");			ContratoTerceirizadoDAO contratoDAO = new ContratoTerceirizadoDAO();			contratoTerceirizado.setDataCadastro(new Date());						historicoEdicao = new HistoricoEdicoesContrato();												contratoDAO.merge(contratoTerceirizado);									if(contratoTerceirizado.getCodigo()==null) {			contratoTerceirizado = contratoDAO.loadLast();			}						HistoricoEdicoesContratoDAO histDAO = new HistoricoEdicoesContratoDAO();			histDAO.salvarHistEdicoes(historicoEdicao, contratoTerceirizado, usuarioLogado);						contratoTerceirizado = new ContratoTerceirizado();			listaContratosTerceirizados = contratoDAO.listar();												listar();			Messages.addGlobalInfo("Contrato cadastrado com Sucesso!", new Object[0]);		} catch (RuntimeException var3) {			Messages.addGlobalError("Ocorreu um erro ao tentar salvar o Contrato.", new Object[0]);			var3.printStackTrace();		}	}	public void salvarEvento() throws ParseException, IOException {		try {			HttpSession sessao = (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);			usuarioLogado = (Usuario) sessao.getAttribute("usuario");			//contratoRelacao = (ContratoRelacao) sessao.getAttribute("funcionarioSelecionado");			EventoTerceirizadoDAO eventoDAO = new EventoTerceirizadoDAO();			ContratoRelacaoDAO contratoRelacaoDAO = new ContratoRelacaoDAO();			FuncionarioTerceirizadoDAO funcionarioDAO = new FuncionarioTerceirizadoDAO();			//System.out.println(contratoRelacao.getFuncionarioTerceirizado().getCargoTerceirizado() + " VALOR funcionarioSelecionado VALOR funcionarioSelecionado");			if (contratoRelacao.getFuncionarioTerceirizado().getCargoTerceirizado()					.equals(contratoRelacao.getContratoTerceirizado().getCargoTerceirizado())					|| eventoTerceirizado.getSubstituto().getCargoTerceirizado()							.equals(contratoRelacao.getContratoTerceirizado().getCargoTerceirizado())) {				for (int posicao = 1; posicao < dataEvento.size(); ++posicao) {					SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");					Date date1 = sdf.parse(sdf.format((Date) dataEvento.get(0)));					Date date2 = sdf.parse(sdf.format((Date) dataEvento.get(1)));					eventoTerceirizado.setDataCadastro(new Date());					eventoTerceirizado.setColaborador(contratoRelacao.getFuncionarioTerceirizado());					eventoTerceirizado.setDataEventoInicial(date1);					eventoTerceirizado.setDataEventoFinal(date2);					eventoTerceirizado							.setEmpresaTerceirizada(contratoRelacao.getContratoTerceirizado().getEmpresaTerceirizada());					eventoTerceirizado.setUsuarioCadastro(usuarioLogado);					eventoTerceirizado.setContratoTerceirizado(contratoRelacao.getContratoTerceirizado());					if (eventoTerceirizado.getSubstituto() == null) {						contratoRelacao.setStatus(eventoTerceirizado.getTipoEvento());												if(eventoTerceirizado.getTipoEvento().equals("Inconsistência")) {							// save salva duas vezes							if (eventoTerceirizado.getHoras().isEmpty() || eventoTerceirizado.getHoras() == null) {								eventoTerceirizado.setHoras("00:00");							}							if (eventoTerceirizado.getDias() == null) {								eventoTerceirizado.setDias("0");							}							eventoDAO.merge(eventoTerceirizado);							funcionarioSelecionado = contratoRelacao.getFuncionarioTerceirizado();							contratoRelacaoDAO.merge(contratoRelacao);							contratoHistFuncionario.setStatus(contratoRelacao.getStatus());							contratoRelacaoDAO.salvarFuncionarioHist(contratoRelacao, contratoHistFuncionario);							try {								eventoTerceirizado = eventoDAO.loadLast(funcionarioSelecionado);							} catch (Exception e) {								Messages.addGlobalError("Erro carregar funcionarioSelecionado.", new Object[0]);								e.printStackTrace();							}							funcionarioSelecionado.setTipoEvento(eventoTerceirizado);							System.out.println("VALOR EVENTO " + eventoTerceirizado);							System.out.println("VALOR FUNC " + funcionarioSelecionado);							funcionarioDAO.merge(funcionarioSelecionado);							Messages.addGlobalInfo("Evento cadastrado com Sucesso!", new Object[0]);						}												if(eventoTerceirizado.getTipoEvento().equals("Férias")) {							// save salva duas vezes							if (eventoTerceirizado.getHoras() == null) {								eventoTerceirizado.setHoras("00:00");							}							if (eventoTerceirizado.getDias().isEmpty() || eventoTerceirizado.getDias() == null) {								eventoTerceirizado.setDias("0");							}							eventoDAO.merge(eventoTerceirizado);							funcionarioSelecionado = contratoRelacao.getFuncionarioTerceirizado();							contratoRelacaoDAO.merge(contratoRelacao);							contratoHistFuncionario.setStatus(contratoRelacao.getStatus());							contratoRelacaoDAO.salvarFuncionarioHist(contratoRelacao, contratoHistFuncionario);							try {								eventoTerceirizado = eventoDAO.loadLast(funcionarioSelecionado);							} catch (Exception e) {								Messages.addGlobalError("Erro carregar funcionarioSelecionado.", new Object[0]);								e.printStackTrace();							}							funcionarioSelecionado.setTipoEvento(eventoTerceirizado);							System.out.println("VALOR EVENTO " + eventoTerceirizado);							System.out.println("VALOR FUNC " + funcionarioSelecionado);							funcionarioDAO.merge(funcionarioSelecionado);							Messages.addGlobalInfo("Evento cadastrado com Sucesso!", new Object[0]);						}																		if(eventoTerceirizado.getTipoEvento().equals("Afastamento")) {							// save salva duas vezes							if (eventoTerceirizado.getHoras().isEmpty() || eventoTerceirizado.getHoras() == null || eventoTerceirizado.getHoras().equals("")) {								eventoTerceirizado.setHoras("00:00");							}							if (eventoTerceirizado.getDias().isEmpty() || eventoTerceirizado.getDias() == null) {								eventoTerceirizado.setDias("0");							}							eventoDAO.merge(eventoTerceirizado);							funcionarioSelecionado = contratoRelacao.getFuncionarioTerceirizado();							contratoRelacaoDAO.merge(contratoRelacao);							contratoHistFuncionario.setStatus(contratoRelacao.getStatus());							contratoRelacaoDAO.salvarFuncionarioHist(contratoRelacao, contratoHistFuncionario);							try {								eventoTerceirizado = eventoDAO.loadLast(funcionarioSelecionado);							} catch (Exception e) {								Messages.addGlobalError("Erro carregar funcionarioSelecionado.", new Object[0]);								e.printStackTrace();							}							funcionarioSelecionado.setTipoEvento(eventoTerceirizado);							System.out.println("VALOR EVENTO " + eventoTerceirizado);							System.out.println("VALOR FUNC " + funcionarioSelecionado);							funcionarioDAO.merge(funcionarioSelecionado);							Messages.addGlobalInfo("Evento cadastrado com Sucesso!", new Object[0]);						}																	} else {						if (eventoTerceirizado.getSubstituto().getCargoTerceirizado()								.equals(contratoRelacao.getContratoTerceirizado().getCargoTerceirizado()) && eventoTerceirizado.getSubstituto() !=null) {							contratoRelacao.setStatus("Substituto");							System.out.println("contratoRelacao.getFuncionarioTerceirizado()"									+ contratoRelacao.getFuncionarioTerceirizado());							contratoHistFuncionario.setFuncionarioTerceirizado(eventoTerceirizado.getSubstituto());							contratoHistFuncionario.setObservacao("Volante de: "									+ contratoRelacao.getFuncionarioTerceirizado().getPessoa().getNomeCompleto()									+ " - Pelo motivo: " + eventoTerceirizado.getTipoEvento());																					if (filtro == 1 ) {								Date date3 = sdf.parse(sdf.format((Date) dataSubstituto.get(0)));								Date date4 = sdf.parse(sdf.format((Date) dataSubstituto.get(1)));								eventoTerceirizado.setDataSubstitutoInicial(date3);								eventoTerceirizado.setDataSubstitutoFinal(date4);								contratoRelacao.setFuncionarioTerceirizado(eventoTerceirizado.getSubstituto());							} 														if (eventoTerceirizado.getHoras() == null) {								eventoTerceirizado.setHoras("00:00");							}							if (eventoTerceirizado.getDias().isEmpty() || eventoTerceirizado.getDias() == null) {								eventoTerceirizado.setDias("0");							}														System.out.println("contratoRelacao.getFuncion " + contratoRelacao.getFuncionarioTerceirizado().getPessoa().getNomeCompleto());														// save salva duas vezes							eventoDAO.merge(eventoTerceirizado);							funcionarioSelecionado = contratoRelacao.getFuncionarioTerceirizado();							contratoRelacaoDAO.merge(contratoRelacao);							contratoHistFuncionario.setStatus(contratoRelacao.getStatus());							contratoRelacaoDAO.salvarFuncionarioHist(contratoRelacao, contratoHistFuncionario);							try {								eventoTerceirizado = eventoDAO.loadLast(funcionarioSelecionado);							} catch (Exception e) {								Messages.addGlobalError("Erro carregar funcionarioSelecionado.", new Object[0]);								e.printStackTrace();							}							funcionarioSelecionado.setTipoEvento(eventoTerceirizado);							System.out.println("VALOR EVENTO " + eventoTerceirizado);							System.out.println("VALOR FUNC " + funcionarioSelecionado);							funcionarioDAO.merge(funcionarioSelecionado);							Messages.addGlobalInfo("Evento cadastrado com Sucesso!", new Object[0]);						} else {							Messages.addGlobalError("Cargo do Funcionário não compatível com a Atividade do Contrato.",									new Object[0]);						}					}																									}				funcionarioSelecionado = new FuncionarioTerceirizado();								this.carregarListaEventosPorFuncionario();			} else {				Messages.addGlobalError("Cargo do Funcionário não compatível com a Atividade do Contrato.",						new Object[0]);			}			eventoTerceirizado = new EventoTerceirizado();			contratoRelacao = new ContratoRelacao();			contratoHistFuncionario = new ContratoHistFuncionario();			filtro = 0;			this.refresh();		} catch (RuntimeException var11) {			Messages.addGlobalError("Funcionário já vínculado a um contrato.", new Object[0]);			var11.printStackTrace();		}	}	public void onRowToggleFuncionarios(ToggleEvent event) {		ContratoRelacaoDAO relacaoDAO = new ContratoRelacaoDAO();		FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_INFO, "Row State " + event.getVisibility(),				"Model:" + (ContratoTerceirizado) event.getData());		System.out.println("event.getData() " + event.getData());		contratoTerceirizado = (ContratoTerceirizado) event.getData();		listaContratoRelacoes = relacaoDAO.listarPorContratoTerceirizadoObject(event.getData());							System.out.println(listaContratoRelacoes + " listaContratoRelacoeslistaContratoRelacoeslistaContratoRelacoeslistaContratoRelacoeslistaCont");		FacesContext.getCurrentInstance().addMessage((String) null, msg);	}	public void salvarNovoFuncionario() {		try {			FuncionarioTerceirizadoDAO funcDAO = new FuncionarioTerceirizadoDAO();			ContratoRelacaoDAO relacaoDAO = new ContratoRelacaoDAO();			int totalFuncionarios = relacaoDAO.listarPorContratoTerceirizadoObject(contratoTerceirizado).size();			System.out.println(contratoTerceirizado.getQtdFuncionarios());			System.out.println("TOTAL FUNCIONARIOS" + totalFuncionarios);			HttpSession sessao = (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);			usuarioLogado = (Usuario) sessao.getAttribute("usuario");			if (ContratoRelacaoDAO.carregaFuncionario(funcionarioSelecionado) == null) {				if (funcionarioSelecionado.getCargoTerceirizado().equals(contratoTerceirizado.getCargoTerceirizado())) {					if (totalFuncionarios < contratoTerceirizado.getQtdFuncionarios()) {						contratoRelacao.setDataCadastro(new Date());						contratoRelacao.setUsuarioCadastro(usuarioLogado);						contratoRelacao.setContratoTerceirizado(contratoTerceirizado);						contratoRelacao.setFuncionarioTerceirizado(funcionarioSelecionado);						contratoRelacao.setStatus("Ativo");						relacaoDAO.merge(contratoRelacao);						funcionarioSelecionado.setTipoEvento((EventoTerceirizado) null);						funcDAO.merge(funcionarioSelecionado);						contratoHistFuncionario.setStatus(contratoRelacao.getStatus());						contratoHistFuncionario.setObservacao(null);						relacaoDAO.salvarFuncionarioHist(contratoRelacao, contratoHistFuncionario);						listaContratoRelacoes = relacaoDAO.listarPorContratoTerceirizadoObject(contratoTerceirizado);						Messages.addGlobalInfo("Funcionário cadastrado com Sucesso!", new Object[0]);					} else {						Messages.addGlobalError("Quantidade máxima de Funcionários atingida para esse contrato.",								new Object[0]);					}				} else {					Messages.addGlobalError("Cargo do Funcionário não compatível com a Atividade do Contrato.",							new Object[0]);				}			} else {				contratoRelacao = relacaoDAO.carregaFuncionario(funcionarioSelecionado);				Messages.addGlobalError("Funcionário já vínculado ao contrato nº "						+ contratoRelacao.getContratoTerceirizado().getnContrato() + " - Unidade "						+ contratoRelacao.getContratoTerceirizado().getUnidade().getUnidadeNome() + " - Município "						+ contratoRelacao.getContratoTerceirizado().getMunicipio().getNome());			}			contratoRelacao = new ContratoRelacao();			contratoHistFuncionario = new ContratoHistFuncionario();			listar();		} catch (RuntimeException var5) {			Messages.addGlobalError("Ocorreu um erro ao tentar salvar o Funcionário.", new Object[0]);			var5.printStackTrace();		}	}	public void salvarSubstituto() {		try {			FuncionarioTerceirizadoDAO funcDAO = new FuncionarioTerceirizadoDAO();			ContratoRelacaoDAO relacaoDAO = new ContratoRelacaoDAO();			System.out.println(contratoRelacao);			contratoTerceirizado = contratoRelacao.getContratoTerceirizado();			int totalFuncionarios = relacaoDAO.listarPorContratoTerceirizadoObject(contratoTerceirizado).size();			System.out.println(contratoTerceirizado.getQtdFuncionarios());			System.out.println("TOTAL FUNCIONARIOS" + totalFuncionarios);			HttpSession sessao = (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);			usuarioLogado = (Usuario) sessao.getAttribute("usuario");			if (ContratoRelacaoDAO.carregaFuncionario(funcionarioSelecionado) == null) {				if (funcionarioSelecionado.getCargoTerceirizado().equals(contratoTerceirizado.getCargoTerceirizado())) {					if (totalFuncionarios < contratoTerceirizado.getQtdFuncionarios()) {						contratoHistFuncionario.setStatus(contratoRelacao.getStatus());						contratoHistFuncionario.setObservacao("Volante de: "								+ contratoRelacao.getFuncionarioTerceirizado().getPessoa().getNomeCompleto()								+ " - Pelo motivo: " + contratoHistFuncionario.getObservacao());						contratoRelacao.setFuncionarioTerceirizado(funcionarioSelecionado);						relacaoDAO.salvarFuncionarioHist(contratoRelacao, contratoHistFuncionario);						contratoRelacao.setDataCadastro(new Date());						contratoRelacao.setUsuarioCadastro(usuarioLogado);						contratoRelacao.setContratoTerceirizado(contratoTerceirizado);						contratoRelacao.setFuncionarioTerceirizado(funcionarioSelecionado);						contratoRelacao.setStatus("Substituto");						relacaoDAO.merge(contratoRelacao);						funcionarioSelecionado.setTipoEvento((EventoTerceirizado) null);						funcDAO.merge(funcionarioSelecionado);						listaContratoRelacoes = relacaoDAO.listar();						Messages.addGlobalInfo("Funcionário cadastrado com Sucesso!", new Object[0]);					} else {						Messages.addGlobalError("Quantidade máxima de Funcionários atingida para esse contrato.",								new Object[0]);					}				} else {					Messages.addGlobalError("Cargo do Funcionário não compatível com a Atividade do Contrato.",							new Object[0]);				}			} else {				contratoRelacao = relacaoDAO.carregaFuncionario(funcionarioSelecionado);				Messages.addGlobalError("Funcionário já vínculado ao contrato nº "						+ contratoRelacao.getContratoTerceirizado().getnContrato() + " - Unidade "						+ contratoRelacao.getContratoTerceirizado().getUnidade().getUnidadeNome() + " - Município "						+ contratoRelacao.getContratoTerceirizado().getMunicipio().getNome());			}			contratoRelacao = new ContratoRelacao();			contratoHistFuncionario = new ContratoHistFuncionario();			listar();		} catch (RuntimeException var5) {			Messages.addGlobalError("Ocorreu um erro ao tentar salvar o Funcionário.", new Object[0]);			var5.printStackTrace();		}	}	public void carregaRelacao(ActionEvent evento) {		contratoRelacao = (ContratoRelacao) evento.getComponent().getAttributes().get("funcionarioSelecionado");	}	public void excluir() {		try {			ContratoRelacaoDAO relacaoDAO = new ContratoRelacaoDAO();			System.out.println(contratoRelacao + " excluircontratoRelacao");			relacaoDAO.excluir(contratoRelacao);			contratoHistFuncionario.setStatus("Removido");			contratoHistFuncionario.setObservacao(contratoHistFuncionario.getObservacao());			relacaoDAO.salvarFuncionarioHist(contratoRelacao, contratoHistFuncionario);			contratoRelacao = new ContratoRelacao();						listar();			this.refresh();			Messages.addGlobalInfo("Funcionário removido com sucesso.", new Object[0]);		} catch (RuntimeException var3) {			Messages.addGlobalError("Ocorreu um erro ao tentar excluir o Funcionário.", new Object[0]);			var3.printStackTrace();		}	}		public void refresh() {		FacesContext context = FacesContext.getCurrentInstance();		Application application = context.getApplication();		ViewHandler viewHandler = application.getViewHandler();		UIViewRoot viewRoot = viewHandler.createView(context, context.getViewRoot().getViewId());		context.setViewRoot(viewRoot);		context.renderResponse();	}	public void excluirContrato(ActionEvent evento) {		try {			ContratoTerceirizadoDAO contratoDAO = new ContratoTerceirizadoDAO();			contratoTerceirizado = (ContratoTerceirizado) evento.getComponent().getAttributes()					.get("contratoSelecionado");			contratoDAO.excluir(contratoTerceirizado);			contratoTerceirizado = new ContratoTerceirizado();			listar();			Messages.addGlobalInfo("Contrato removido com sucesso.", new Object[0]);		} catch (RuntimeException var3) {			Messages.addGlobalError("Existe funcionários vínculados a esse contrato.", new Object[0]);			var3.printStackTrace();		}	}	public void editar(ActionEvent evento) {		contratoTerceirizado = (ContratoTerceirizado) evento.getComponent().getAttributes().get("contratoSelecionado");	}	public void novoFuncionario(ActionEvent evento) {		HttpSession sessao = (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);		usuarioLogado = (Usuario) sessao.getAttribute("usuario");		contratoTerceirizado = (ContratoTerceirizado) evento.getComponent().getAttributes().get("contratoSelecionado");		FuncionarioTerceirizadoDAO funcDAO = new FuncionarioTerceirizadoDAO();		UserClaimsContratoDAO userClaimDAO = new UserClaimsContratoDAO();		listaUserClaims = userClaimDAO.listarPorUsuarioLogado(usuarioLogado);		userClaim = new UserClaimsContrato();		ArrayList<String> codigosUnidades = new ArrayList<String>();		for (int posicao = 0; posicao < listaUserClaims.size(); posicao++) {			codigosUnidades.add(listaUserClaims.get(posicao).getUnidade().getUnidadeNome());		}		if (usuarioLogado.getSetor().getSetorNome().contains("Gerência de Apoio Operacional")				|| usuarioLogado.getNivelAcesso().getCodigo() == 1) {			System.out.println("listarPorTodos");			listaFuncionarios = funcDAO.listarPorTodos();		} else {			System.out.println("listarPorUnidadeUsuarioLogado");			listaFuncionarios = funcDAO.listarPorClaims(codigosUnidades);		}	}	public void novoEvento(ActionEvent evento) throws ParseException {		HttpSession sessao = (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);		usuarioLogado = (Usuario) sessao.getAttribute("usuario");		contratoRelacao = (ContratoRelacao) evento.getComponent().getAttributes().get("funcionarioSelecionado");		eventoTerceirizado = new EventoTerceirizado();		dataEvento = null;		dataSubstituto = null;				listaEventosTerceirizadosPorFuncionario = new ArrayList<>();		FuncionarioTerceirizadoDAO funcDAO = new FuncionarioTerceirizadoDAO();		UserClaimsContratoDAO userClaimDAO = new UserClaimsContratoDAO();		listaUserClaims = userClaimDAO.listarPorUsuarioLogado(usuarioLogado);		userClaim = new UserClaimsContrato();		ArrayList<String> codigosUnidades = new ArrayList<String>();		for (int posicao = 0; posicao < listaUserClaims.size(); posicao++) {			codigosUnidades.add(listaUserClaims.get(posicao).getUnidade().getUnidadeNome());		}		if (usuarioLogado.getSetor().getSetorNome().contains("Gerência de Apoio Operacional")				|| usuarioLogado.getNivelAcesso().getCodigo() == 1) {			listaFuncionarios = funcDAO.listarPorTodos();		} else {			listaFuncionarios = funcDAO.listarPorClaims(codigosUnidades);		}		// EventoTerceirizadoDAO eventoDAO = new EventoTerceirizadoDAO();		// listaEventosTerceirizadosPorFuncionario =		// eventoDAO.listarFuncionarioSelecionado(contratoRelacao.getFuncionarioTerceirizado(),		// eventoTerceirizado.getTipoEvento(), dataInicial, dataFinal);				System.out.println("valor contrato " + contratoTerceirizado);		System.out.println("valor RELACAO " + contratoRelacao.getFuncionarioTerceirizado().getPessoa().getNomeCompleto());	}	public void carregarListaEventosPorFuncionario() throws ParseException {		HttpSession sessao = (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);		usuarioLogado = (Usuario) sessao.getAttribute("usuario");		FuncionarioTerceirizadoDAO funcDAO = new FuncionarioTerceirizadoDAO();		UserClaimsContratoDAO userClaimDAO = new UserClaimsContratoDAO();		listaUserClaims = userClaimDAO.listarPorUsuarioLogado(usuarioLogado);		userClaim = new UserClaimsContrato();		workingDays = 0;		ArrayList<String> codigosUnidades = new ArrayList<String>();		for (int posicao = 0; posicao < listaUserClaims.size(); posicao++) {			codigosUnidades.add(listaUserClaims.get(posicao).getUnidade().getUnidadeNome());		}		if (usuarioLogado.getSetor().getSetorNome().contains("Gerência de Apoio Operacional")				|| usuarioLogado.getNivelAcesso().getCodigo() == 1) {			listaFuncionarios = funcDAO.listarPorTodos();		} else {			listaFuncionarios = funcDAO.listarPorClaims(codigosUnidades);		}		EventoTerceirizadoDAO eventoDAO = new EventoTerceirizadoDAO();		for (int posicao = 1; posicao < dataEvento.size(); ++posicao) {			SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");			Date date1 = sdf.parse(sdf.format((Date) dataEvento.get(0)));			Date date2 = sdf.parse(sdf.format((Date) dataEvento.get(1)));			listaEventosTerceirizadosPorFuncionario = eventoDAO.listarFuncionarioSelecionado(					contratoRelacao.getFuncionarioTerceirizado(), eventoTerceirizado.getTipoEvento(), date1, date2);		}		int days = (int) ((dataEvento.get(1).getTime() - dataEvento.get(0).getTime()) / (24 * 60 * 60 * 1000));		System.out.println("days " + days);		int totalDays = days + 1;		System.out.println("DIAS TOTAL " + totalDays);		Calendar calendar = new GregorianCalendar();		calendar.setTime(dataEvento.get(0));		for (int i = 0; i <= totalDays; i++) {			if (!(calendar.get(Calendar.DAY_OF_WEEK) == Calendar.SATURDAY)					&& !(calendar.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY)) {				workingDays++;			}			calendar.add(Calendar.DATE, 1);		}		eventoTerceirizado.setDias(totalDays + "");		if (eventoTerceirizado.getTipoEvento().equals("Inconsistência")) {			mostrarCamposInconsistencia = true;			mostrarSubstituto = false;			eventoTerceirizado.setDias(null);			System.out.println("CAIU NO EQUALS mostrarCamposInconsistencia" + mostrarCamposInconsistencia);		} else {			mostrarCamposInconsistencia = false;		}	}	public void mostrarCamposPorTipo() throws ParseException {		HttpSession sessao = (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);		usuarioLogado = (Usuario) sessao.getAttribute("usuario");		FuncionarioTerceirizadoDAO funcDAO = new FuncionarioTerceirizadoDAO();		UserClaimsContratoDAO userClaimDAO = new UserClaimsContratoDAO();		listaUserClaims = userClaimDAO.listarPorUsuarioLogado(usuarioLogado);		userClaim = new UserClaimsContrato();		if (eventoTerceirizado.getTipoEvento().equals("Afastamento")) {			mostrarDiaseHoras = true;			System.out.println("CAIU NO EQUALS mostrarDiaseHoras" + mostrarDiaseHoras);		}		if (eventoTerceirizado.getTipoEvento().equals("Inconsistência")) {			mostrarCamposInconsistencia = true;			mostrarSubstituto = false;			mostrarDiasePergunta = false;			mostrarDiaseHoras = false;			System.out.println("CAIU NO EQUALS mostrarCamposInconsistencia" + mostrarCamposInconsistencia);		} else {			mostrarCamposInconsistencia = false;			mostrarDiasePergunta = true;		}	}	public void dadosFuncSelecionado() {		pessoa = PessoaDAO.carregarCpf(funcionarioSelecionado.getPessoa().getCpf());		System.out.println(pessoa + "pessoa");	}	public void buscarCPF() {		new FuncionarioTerceirizadoDAO();		pessoa = FuncionarioTerceirizadoDAO.carregarCpf(pessoa.getCpf());		CidadeDAO municipioDAO = new CidadeDAO();		Cidades = municipioDAO.buscarPorEstado(pessoa.getEstadoEndereco().getCodigo());	}	public void habilitar() {		if (filtro == 1) {			mostrarSubstituto = true;			eventoTerceirizado.setDias(eventoTerceirizado.getDias());		}		if (filtro == 0) {			mostrarSubstituto = false;			eventoTerceirizado.setDias(eventoTerceirizado.getDias());		}	}	public void blurEvento() throws ParseException {		new ContratoRelacaoDAO();		new ContratoTerceirizadoDAO();		EventoTerceirizadoDAO eventoDAO = new EventoTerceirizadoDAO();		new EmpresaTerceirizadaDAO();		try {			SimpleDateFormat fmt = new SimpleDateFormat("dd/MM/yyyy");			Date strINICIAL = fmt.parse(fmt.format((Date) dataInicial));			Date strFINAL = fmt.parse(fmt.format((Date) dataFinal));			System.out.println(strINICIAL + " " + strFINAL);			if (nContrato != null) {				UserClaimsContratoDAO userClaimDAO = new UserClaimsContratoDAO();				UnidadeDAO unidadeDAO = new UnidadeDAO();				listaUserClaims = userClaimDAO.listarPorUsuarioLogado(usuarioLogado);				userClaim = new UserClaimsContrato();				ArrayList<Unidade> codigosUnidades = new ArrayList<Unidade>();				for (int posicao = 0; posicao < listaUserClaims.size(); posicao++) {					codigosUnidades.add(listaUserClaims.get(posicao).getUnidade());				}				if (usuarioLogado.getNivelAcesso().getCodigo() == 1) {					codigosUnidades = (ArrayList<Unidade>) unidadeDAO.listar();				}				if (usuarioLogado.getSetor().getSetorNome().contains("Gerência de Apoio Operacional")						&& usuarioLogado.getNivelAcesso().getNivel().contains("CONTRATO")) {					codigosUnidades = (ArrayList<Unidade>) unidadeDAO.listar();				}				if (strINICIAL != null && strFINAL == null) {					Messages.addGlobalError("Favor informar a Data Final", new Object[0]);				}				if (strFINAL != null && strINICIAL == null) {					Messages.addGlobalError("Favor informar a Data Inicial", new Object[0]);				}				if (strFINAL == null && strINICIAL == null) {					Messages.addGlobalError("Favor informar a Data Inicial e Data Final", new Object[0]);				} else {					listaEventosTerceirizados = eventoDAO.listarPorEmpresa(nContrato, empresaTerceiriza, setorRelatorio,							tipoEvento, strINICIAL, strFINAL, codigosUnidades);				}				if (listaEventosTerceirizados.isEmpty()) {					Messages.addGlobalError("Não existe dados com os campos fornecidos!", new Object[0]);				}				if (tipoEvento.equals("Inconsistência")) {					mostrarTabelaRelatorioEventos = true;					mostrarCamposInconsistencia = true;										//afas					mostrarAfastamento = false;										//ferias					mostrarFerias = false;				}				if (tipoEvento.equals("Afastamento")) {					mostrarDiaseHoras = true;					mostrarAfastamento = true;					mostrarTabelaRelatorioEventos = true;															//ferias					mostrarFerias = false;					//incons					mostrarCamposInconsistencia = false;				}				if (tipoEvento.equals("Férias")) {					mostrarDiaseHoras = false;					mostrarFerias = true;					mostrarTabelaRelatorioEventos = true;										//incons					mostrarCamposInconsistencia = false;					//afasta					mostrarAfastamento = false;				}						}		} catch (Exception var6) {			var6.printStackTrace();		}	}	@SuppressWarnings("static-access")	public void gerarRelatorioEventos() throws Exception {		try {			System.out.println(unidade + " unidade gerarRelatorioEventos");			SimpleDateFormat fmt = new SimpleDateFormat("dd/MM/yyyy");			String strINICIAL = fmt.format(dataInicial);			String strFINAL = fmt.format(dataFinal);			EmpresaTerceirizadaDAO empresaDAO = new EmpresaTerceirizadaDAO();			EmpresaTerceirizada newEmpresa = empresaDAO.carregaEmpresaPorNome(empresaTerceiriza);			UnidadeDAO unidadeDAO = new UnidadeDAO();			Unidade newUnidade = unidadeDAO.carregarUnidadeAtual(setorRelatorio);			System.out.println(newEmpresa + " BEAN newEmpresa");			System.out.println(newUnidade + " BEAN newUnidade");			if (newUnidade == null) {				System.out.println("É nulo bean");				neewUnidade = null;			} else {				System.out.println("NÃO É NULO BEAN");				neewUnidade = newUnidade.getCodigo();			}			if (tipoEvento.equals("Inconsistência")) {				if (neewUnidade == null) {					JSFUtil.redirect("../DocumentoPDF?eventoinconsistencia" + "&dataInicial=" + strINICIAL							+ "&dataFinal=" + strFINAL + "&empresaNome=" + newEmpresa.getCodigo() + "&nContrato="							+ nContrato + "&tipoEvento=" + tipoEvento + "&usuarioLogado="							+ usuarioLogado.getPessoa().getCpf());				} else {					JSFUtil.redirect("../DocumentoPDF?eventoinconsistencia" + "&dataInicial=" + strINICIAL							+ "&dataFinal=" + strFINAL + "&empresaNome=" + newEmpresa.getCodigo() + "&nContrato="							+ nContrato + "&tipoEvento=" + tipoEvento + "&unidade=" + neewUnidade + "&usuarioLogado="							+ usuarioLogado.getPessoa().getCpf());				}			}			if (tipoEvento.equals("Afastamento")) {				if (neewUnidade == null) {					JSFUtil.redirect("../DocumentoPDF?eventoafastamento" + "&dataInicial=" + strINICIAL + "&dataFinal="							+ strFINAL + "&empresaNome=" + newEmpresa.getCodigo() + "&nContrato=" + nContrato							+ "&tipoEvento=" + tipoEvento + "&usuarioLogado=" + usuarioLogado.getPessoa().getCpf());				} else {					JSFUtil.redirect("../DocumentoPDF?eventoafastamento" + "&dataInicial=" + strINICIAL + "&dataFinal="							+ strFINAL + "&empresaNome=" + newEmpresa.getCodigo() + "&nContrato=" + nContrato							+ "&tipoEvento=" + tipoEvento + "&unidade=" + neewUnidade + "&usuarioLogado="							+ usuarioLogado.getPessoa().getCpf());				}			}						if (tipoEvento.equals("Férias")) {				System.out.println("ENTROU FÉRIASFÉRIASFÉRIASFÉRIASFÉRIASFÉRIAS");				if (neewUnidade == null) {					JSFUtil.redirect("../DocumentoPDF?eventoferias" + "&dataInicial=" + strINICIAL + "&dataFinal="							+ strFINAL + "&empresaNome=" + newEmpresa.getCodigo() + "&nContrato=" + nContrato							+ "&tipoEvento=" + tipoEvento + "&usuarioLogado=" + usuarioLogado.getPessoa().getCpf());				} else {					JSFUtil.redirect("../DocumentoPDF?eventoferias" + "&dataInicial=" + strINICIAL + "&dataFinal="							+ strFINAL + "&empresaNome=" + newEmpresa.getCodigo() + "&nContrato=" + nContrato							+ "&tipoEvento=" + tipoEvento + "&unidade=" + neewUnidade + "&usuarioLogado="							+ usuarioLogado.getPessoa().getCpf());				}			}		} catch (IOException e) {			e.printStackTrace();		} catch (NullPointerException nulo) {			throw new NullPointerException(					"Erro ao imprimir o relatório. Valores das variáveis inválidos " + nulo.getMessage());		}	}	public void gerarRelatorio() throws Exception {		try {			SimpleDateFormat fmt = new SimpleDateFormat("dd/MM/yyyy");			String strINICIAL = fmt.format(dataInicial);			String strFINAL = fmt.format(dataFinal);			EmpresaTerceirizadaDAO empresaDAO = new EmpresaTerceirizadaDAO();			EmpresaTerceirizada newEmpresa = empresaDAO.carregaEmpresaPorNome(empresaTerceiriza);			if (tipoEvento.equals("Férias")) {				String varialFerias = "Ferias";				JSFUtil.redirect("../ImprimirRelatorio?rlt_nome=planilhaferias" + "&dataInicial=" + strINICIAL						+ "&dataFinal=" + strFINAL + "&empresaNome=" + newEmpresa.getCodigo() + "&nContrato="						+ nContrato + "&tipoEvento=" + varialFerias);			}			if (tipoEvento.equals("Inconsistência")) {				String varialInconsistencia = "Inconsistencia";				JSFUtil.redirect("../ImprimirRelatorio?rlt_nome=planilhainconsistencia" + "&dataInicial=" + strINICIAL						+ "&dataFinal=" + strFINAL + "&empresaNome=" + newEmpresa.getCodigo() + "&nContrato="						+ nContrato + "&tipoEvento=" + varialInconsistencia + "&unidade=" + setorRelatorio);			}			if (tipoEvento.equals("Afastamento")) {				JSFUtil.redirect("../ImprimirRelatorio?rlt_nome=planilhaafastamento" + "&dataInicial=" + strINICIAL						+ "&dataFinal=" + strFINAL + "&empresaNome=" + newEmpresa.getCodigo() + "&nContrato="						+ nContrato + "&tipoEvento=" + tipoEvento);			}		} catch (IOException e) {			e.printStackTrace();		} catch (NullPointerException nulo) {			throw new NullPointerException(					"Erro ao imprimir o relatório. Valores das variáveis inválidos " + nulo.getMessage());		}	}	public void blurContratoXFuncionario() {		new EventoTerceirizadoDAO();		new EmpresaTerceirizadaDAO();		ContratoHistFuncionarioDAO histDAO = new ContratoHistFuncionarioDAO();		try {			if (contratoTerceirizado != null) {				System.out.println("caiu aqui contratoTerceirizado.getEmpresaTerceirizada()");				if (dataInicial != null && dataFinal == null) {					Messages.addGlobalError("Favor informar a Data Final", new Object[0]);				}				if (dataFinal != null && dataInicial == null) {					Messages.addGlobalError("Favor informar a Data Inicial", new Object[0]);				}				listaHistFuncionarios = histDAO.listarPorEmpresa(contratoTerceirizado,						contratoHistFuncionario.getFuncionarioTerceirizado(), dataInicial, dataFinal);				if (listaHistFuncionarios.isEmpty()) {					Messages.addGlobalError("Não existe dados com os campos fornecidos!", new Object[0]);				}				System.out.println(listaHistFuncionarios);			} else {				listaHistFuncionarios = histDAO.listarPorEmpresa(contratoTerceirizado,						contratoHistFuncionario.getFuncionarioTerceirizado(), dataInicial, dataFinal);			}		} catch (Exception var5) {			var5.printStackTrace();		}	}	public void blurRelacaoFuncionario() {		new EventoTerceirizadoDAO();		new EmpresaTerceirizadaDAO();		ContratoRelacaoDAO relacaoDAO = new ContratoRelacaoDAO();		try {			if (funcionarioSelecionado != null) {				if (dataInicial != null && dataFinal == null) {					Messages.addGlobalError("Favor informar a Data Final", new Object[0]);				}				if (dataFinal != null && dataInicial == null) {					Messages.addGlobalError("Favor informar a Data Inicial", new Object[0]);				}				listaContratoRelacoes = relacaoDAO.listarPorFuncionarioRelacao(funcionarioSelecionado, contratoRelacao,						dataInicial, dataFinal);				if (listaContratoRelacoes.isEmpty()) {					Messages.addGlobalError("Não existe dados com os campos fornecidos!", new Object[0]);				}				System.out.println(listaHistFuncionarios);			} else {				listaContratoRelacoes = relacaoDAO.listarPorFuncionarioRelacao(funcionarioSelecionado, contratoRelacao,						dataInicial, dataFinal);			}		} catch (Exception var5) {			var5.printStackTrace();		}	}	public void editarEvento(ActionEvent evento) {	}	@SuppressWarnings("deprecation")	public String brandSubTotalHoras(String startTime2, String unidade) {		int total = 0;		for (EventoTerceirizado evento : listaEventosTerceirizados) {			if (evento.getContratoTerceirizado().getUnidade().getUnidadeNome().equals(unidade)) {				String[] partes = evento.getHoras().split(":");				int horas = Integer.parseInt(partes[0]) * 60 + Integer.parseInt(partes[1]);				System.out.println(horas + " horas");				total += horas;			}		}		long hours = TimeUnit.MINUTES.toHours(Long.valueOf(total));		long remainMinutes = total - TimeUnit.HOURS.toMinutes(hours);		System.out.println(String.format("%02d:%02d", hours, remainMinutes)				+ " String.format(\"%02d:%02d\", hours, remainMinutes)");		return String.format("%02d:%02d", hours, remainMinutes);	}	@SuppressWarnings("deprecation")	public String brandSubTotalAfastamentoDias(String unidade) {		int totalDias = 0;		int totalMinutos = 0;		int total = 0;		int totalDiasFinal = 0;		for (EventoTerceirizado evento : listaEventosTerceirizados) {			if (evento.getContratoTerceirizado().getUnidade().getUnidadeNome().equals(unidade)) {				if (evento.getHoras().equals("00:00") || evento.getHoras().equals("") || evento.equals(null) || evento.getHoras().isEmpty()) {					String partesDias = evento.getDias();					/// System.out.println(partes + "partespartespartespartes");					// int dias += Integer.parseInt(partes);					// System.out.println(dias + "diasdiasdiasdiasdiasdiasdias");					System.out.println("TOTAL DIAS" + partesDias);					totalDias += Integer.parseInt(partesDias);				} else {					String partesDias = evento.getDias();					/// System.out.println(partes + "partespartespartespartes");					// int dias += Integer.parseInt(partes);					// System.out.println(dias + "diasdiasdiasdiasdiasdiasdias");					System.out.println("TOTAL DIAS" + partesDias);					totalDias += Integer.parseInt(partesDias);					String[] partesHoras = evento.getHoras().split(":");					System.out.println(							evento.getHoras() + "evento.getHoras()evento.getHoras()evento.getHoras()evento.getHoras()");					int horas = Integer.parseInt(partesHoras[0]) * 60 + Integer.parseInt(partesHoras[1]);					/// System.out.println(partes + "partespartespartespartes");					// int dias += Integer.parseInt(partes);					// System.out.println(dias + "diasdiasdiasdiasdiasdiasdias");					totalMinutos += horas;					System.out.println(totalMinutos + " totalMinutos");				}				total = totalDias;			}		}		int days = (int) TimeUnit.MINUTES.toDays(totalMinutos);		long hours = TimeUnit.MINUTES.toHours(totalMinutos) - (days * 24);		long minute = TimeUnit.MINUTES.toMinutes(totalMinutos) - (TimeUnit.MINUTES.toHours(totalMinutos) * 60);		long second = TimeUnit.MINUTES.toSeconds(totalMinutos) - (TimeUnit.MINUTES.toMinutes(totalMinutos) * 60);		System.out.println(days + " days");		System.out.println(hours + " hours");		System.out.println(minute + " minute");		System.out.println(second + " second");		totalDiasFinal = total + days;		return totalDiasFinal + " dia(s) " + hours + " hora(s) " + minute + " minuto(s)";	}	public void excluirEvento(ActionEvent evento) throws IOException, ParseException {		try {			eventoTerceirizado = (EventoTerceirizado) evento.getComponent().getAttributes().get("eventoSelecionado");			FuncionarioTerceirizadoDAO funcDAO = new FuncionarioTerceirizadoDAO();			eventoTerceirizado.getColaborador().setTipoEvento(null);			funcDAO.merge(eventoTerceirizado.getColaborador());			EventoTerceirizadoDAO eventoDAO = new EventoTerceirizadoDAO();			eventoDAO.excluir(eventoTerceirizado);			Messages.addGlobalInfo("Evento removido com sucesso.");			this.carregarListaEventosPorFuncionario();		} catch (RuntimeException erro) {			Messages.addGlobalError("Ocorreu um erro ao tentar excluir o Evento.");			erro.printStackTrace();		}	}	public void excluirEventoPaginaRelatorio(ActionEvent evento) throws IOException, ParseException {		try {			eventoTerceirizado = (EventoTerceirizado) evento.getComponent().getAttributes().get("eventoSelecionado");			FuncionarioTerceirizadoDAO funcDAO = new FuncionarioTerceirizadoDAO();			eventoTerceirizado.getColaborador().setTipoEvento(null);			funcDAO.merge(eventoTerceirizado.getColaborador());			EventoTerceirizadoDAO eventoDAO = new EventoTerceirizadoDAO();			eventoDAO.excluir(eventoTerceirizado);			Messages.addGlobalInfo("Evento removido com sucesso.");			this.blurEvento();		} catch (RuntimeException erro) {			Messages.addGlobalError("Ocorreu um erro ao tentar excluir o Evento.");			erro.printStackTrace();		}	}	public ContratoRelacao getContratoRelacao() {		return contratoRelacao;	}	public void setContratoRelacao(ContratoRelacao contratoRelacao) {		this.contratoRelacao = contratoRelacao;	}	public List<ContratoRelacao> getListaContratoRelacoes() {		return listaContratoRelacoes;	}	public void setListaContratoRelacoes(List<ContratoRelacao> listaContratoRelacoes) {		this.listaContratoRelacoes = listaContratoRelacoes;	}	public EventoTerceirizado getEventoTerceirizado() {		return eventoTerceirizado;	}	public void setEventoTerceirizado(EventoTerceirizado eventoTerceirizado) {		this.eventoTerceirizado = eventoTerceirizado;	}	public List<EventoTerceirizado> getListaEventosTerceirizados() {		return listaEventosTerceirizados;	}	public void setListaEventosTerceirizados(List<EventoTerceirizado> listaEventosTerceirizados) {		this.listaEventosTerceirizados = listaEventosTerceirizados;	}	public ContratoHistFuncionario getContratoHistFuncionario() {		return contratoHistFuncionario;	}	public void setContratoHistFuncionario(ContratoHistFuncionario contratoHistFuncionario) {		this.contratoHistFuncionario = contratoHistFuncionario;	}	public List<ContratoHistFuncionario> getListaHistFuncionarios() {		return listaHistFuncionarios;	}	public void setListaHistFuncionarios(List<ContratoHistFuncionario> listaHistFuncionarios) {		this.listaHistFuncionarios = listaHistFuncionarios;	}	public ContratoTerceirizado getContratoTerceirizado() {		return contratoTerceirizado;	}	public void setContratoTerceirizado(ContratoTerceirizado contratoTerceirizado) {		this.contratoTerceirizado = contratoTerceirizado;	}	public List<ContratoTerceirizado> getListaContratosTerceirizados() {		return listaContratosTerceirizados;	}	public void setListaContratosTerceirizados(List<ContratoTerceirizado> listaContratosTerceirizados) {		this.listaContratosTerceirizados = listaContratosTerceirizados;	}	public FuncionarioTerceirizado getFuncionarioSelecionado() {		return funcionarioSelecionado;	}	public void setFuncionarioSelecionado(FuncionarioTerceirizado funcionarioSelecionado) {		this.funcionarioSelecionado = funcionarioSelecionado;	}	public List<FuncionarioTerceirizado> getListaFuncionarios() {		return listaFuncionarios;	}	public void setListaFuncionarios(List<FuncionarioTerceirizado> listaFuncionarios) {		this.listaFuncionarios = listaFuncionarios;	}	public EmpresaTerceirizada getEmpresaTerceirizada() {		return empresaTerceirizada;	}	public void setEmpresaTerceirizada(EmpresaTerceirizada empresaTerceirizada) {		this.empresaTerceirizada = empresaTerceirizada;	}	public List<EmpresaTerceirizada> getListaEmpresasTerceirizadas() {		return listaEmpresasTerceirizadas;	}	public void setListaEmpresasTerceirizadas(List<EmpresaTerceirizada> listaEmpresasTerceirizadas) {		this.listaEmpresasTerceirizadas = listaEmpresasTerceirizadas;	}	public PessoaFisica getPessoa() {		return pessoa;	}	public void setPessoa(PessoaFisica pessoa) {		this.pessoa = pessoa;	}	public List<Cidade> getCidades() {		return Cidades;	}	public void setCidades(List<Cidade> cidades) {		Cidades = cidades;	}	public List<Unidade> getUnidades() {		return unidades;	}	public void setUnidades(List<Unidade> unidades) {		this.unidades = unidades;	}	public List<CargoTerceirizado> getCargos() {		return cargos;	}	public void setCargos(List<CargoTerceirizado> cargos) {		this.cargos = cargos;	}	public Usuario getUsuarioLogado() {		return usuarioLogado;	}	public void setUsuarioLogado(Usuario usuarioLogado) {		this.usuarioLogado = usuarioLogado;	}	public int getFiltro() {		return filtro;	}	public void setFiltro(int filtro) {		this.filtro = filtro;	}	public boolean isMostrarSubstituto() {		return mostrarSubstituto;	}	public void setMostrarSubstituto(boolean mostrarSubstituto) {		this.mostrarSubstituto = mostrarSubstituto;	}	public List<Date> getDataEvento() {		return dataEvento;	}	public void setDataEvento(List<Date> dataEvento) {		this.dataEvento = dataEvento;	}	public List<Date> getDataSubstituto() {		return dataSubstituto;	}	public void setDataSubstituto(List<Date> dataSubstituto) {		this.dataSubstituto = dataSubstituto;	}	public Date getDataInicial() {		return dataInicial;	}	public void setDataInicial(Date dataInicial) {		this.dataInicial = dataInicial;	}	public String getDateIni() {		return dateIni;	}	public void setDateIni(String dateIni) {		this.dateIni = dateIni;	}	public String getDateFini() {		return dateFini;	}	public void setDateFini(String dateFini) {		this.dateFini = dateFini;	}	public Date getDataFinal() {		return dataFinal;	}	public void setDataFinal(Date dataFinal) {		this.dataFinal = dataFinal;	}	public List<EventoTerceirizado> getListaEventosTerceirizadosPorFuncionario() {		return listaEventosTerceirizadosPorFuncionario;	}	public void setListaEventosTerceirizadosPorFuncionario(			List<EventoTerceirizado> listaEventosTerceirizadosPorFuncionario) {		this.listaEventosTerceirizadosPorFuncionario = listaEventosTerceirizadosPorFuncionario;	}	public boolean isMostrarAcoes() {		return mostrarAcoes;	}	public void setMostrarAcoes(boolean mostrarAcoes) {		this.mostrarAcoes = mostrarAcoes;	}	public boolean isCiretran() {		return ciretran;	}	public void setCiretran(boolean ciretran) {		this.ciretran = ciretran;	}	public boolean isCitran() {		return citran;	}	public void setCitran(boolean citran) {		this.citran = citran;	}	public boolean isMostrarModuloParaGerentes() {		return mostrarModuloParaGerentes;	}	public void setMostrarModuloParaGerentes(boolean mostrarModuloParaGerentes) {		this.mostrarModuloParaGerentes = mostrarModuloParaGerentes;	}	public UserClaimsContrato getUserClaim() {		return userClaim;	}	public void setUserClaim(UserClaimsContrato userClaim) {		this.userClaim = userClaim;	}	public boolean isMostrarCamposInconsistencia() {		return mostrarCamposInconsistencia;	}	public void setMostrarCamposInconsistencia(boolean mostrarCamposInconsistencia) {		this.mostrarCamposInconsistencia = mostrarCamposInconsistencia;	}	public boolean isMostrarDiasePergunta() {		return mostrarDiasePergunta;	}	public void setMostrarDiasePergunta(boolean mostrarDiasePergunta) {		this.mostrarDiasePergunta = mostrarDiasePergunta;	}	public List<UserClaimsContrato> getListaUserClaims() {		return listaUserClaims;	}	public void setListaUserClaims(List<UserClaimsContrato> listaUserClaims) {		this.listaUserClaims = listaUserClaims;	}	public int getWorkingDays() {		return workingDays;	}	public List<Setor> getSetores() {		return setores;	}	public void setSetores(List<Setor> setores) {		this.setores = setores;	}	public Setor getSetor() {		return setor;	}	public void setSetor(Setor setor) {		this.setor = setor;	}	public Unidade getUnidade() {		return unidade;	}	public void setUnidade(Unidade unidade) {		this.unidade = unidade;	}	public List<Unidade> getUnidadesSetorUnidades() {		return unidadesSetorUnidades;	}	public void setUnidadesSetorUnidades(List<Unidade> unidadesSetorUnidades) {		this.unidadesSetorUnidades = unidadesSetorUnidades;	}	public List<ContratoTerceirizado> getListaContratosTerceirizadosPorContratoEmpresa() {		return listaContratosTerceirizadosPorContratoEmpresa;	}	public void setListaContratosTerceirizadosPorContratoEmpresa(			List<ContratoTerceirizado> listaContratosTerceirizadosPorContratoEmpresa) {		this.listaContratosTerceirizadosPorContratoEmpresa = listaContratosTerceirizadosPorContratoEmpresa;	}	public String getnContrato() {		return nContrato;	}	public void setnContrato(String nContrato) {		this.nContrato = nContrato;	}	public Long getNeewUnidade() {		return neewUnidade;	}	public void setNeewUnidade(Long neewUnidade) {		this.neewUnidade = neewUnidade;	}	public void setWorkingDays(int workingDays) {		this.workingDays = workingDays;	}	public List<ContratoTerceirizado> getListaEmpresasTerceirizadasPorContrato() {		return listaEmpresasTerceirizadasPorContrato;	}	public void setListaEmpresasTerceirizadasPorContrato(			List<ContratoTerceirizado> listaEmpresasTerceirizadasPorContrato) {		this.listaEmpresasTerceirizadasPorContrato = listaEmpresasTerceirizadasPorContrato;	}	public String getEmpresaTerceiriza() {		return empresaTerceiriza;	}	public void setEmpresaTerceiriza(String empresaTerceiriza) {		this.empresaTerceiriza = empresaTerceiriza;	}	public boolean isMostrarTabelaRelatorioEventos() {		return mostrarTabelaRelatorioEventos;	}	public void setMostrarTabelaRelatorioEventos(boolean mostrarTabelaRelatorioEventos) {		this.mostrarTabelaRelatorioEventos = mostrarTabelaRelatorioEventos;	}	public String getTipoEvento() {		return tipoEvento;	}	public void setTipoEvento(String tipoEvento) {		this.tipoEvento = tipoEvento;	}	public boolean isMostrarDiaseHoras() {		return mostrarDiaseHoras;	}	public void setMostrarDiaseHoras(boolean mostrarDiaseHoras) {		this.mostrarDiaseHoras = mostrarDiaseHoras;	}	public List<ContratoHistFuncionario> getListaHistFuncionariosSubstitutos() {		return listaHistFuncionariosSubstitutos;	}	public void setListaHistFuncionariosSubstitutos(List<ContratoHistFuncionario> listaHistFuncionariosSubstitutos) {		this.listaHistFuncionariosSubstitutos = listaHistFuncionariosSubstitutos;	}	public FuncionarioTerceirizado getSubstitutoPaginaSubs() {		return substitutoPaginaSubs;	}	public void setSubstitutoPaginaSubs(FuncionarioTerceirizado substitutoPaginaSubs) {		this.substitutoPaginaSubs = substitutoPaginaSubs;	}	public String getSetorRelatorio() {		return setorRelatorio;	}	public void setSetorRelatorio(String setorRelatorio) {		this.setorRelatorio = setorRelatorio;	}	public boolean isMostrarFerias() {		return mostrarFerias;	}	public void setMostrarFerias(boolean mostrarFerias) {		this.mostrarFerias = mostrarFerias;	}	public boolean isMostrarAfastamento() {		return mostrarAfastamento;	}	public void setMostrarAfastamento(boolean mostrarAfastamento) {		this.mostrarAfastamento = mostrarAfastamento;	}	public Object getRowKey(ContratoTerceirizado fruit) {		return fruit != null ? fruit : null;	}	public ContratoTerceirizado getRowData(String rowKey) {		List<ContratoTerceirizado> fruits = (List<ContratoTerceirizado>) listaContratosTerceirizados;		Integer value = Integer.valueOf(rowKey);		for (ContratoTerceirizado fruit : fruits) {			if (fruit.getCodigo().equals(value)) {				return fruit;			}		}		return null;	}	public List<ContratoRelacao> getFilteredListaContratoRelacoes() {		return filteredListaContratoRelacoes;	}	public void setFilteredListaContratoRelacoes(List<ContratoRelacao> filteredListaContratoRelacoes) {		this.filteredListaContratoRelacoes = filteredListaContratoRelacoes;	}	public boolean isSoVisualizar() {		return soVisualizar;	}	public void setSoVisualizar(boolean soVisualizar) {		this.soVisualizar = soVisualizar;	}	public ContratoTerceirizado getCodigoContratoHistorico() {		return codigoContratoHistorico;	}	public void setCodigoContratoHistorico(ContratoTerceirizado codigoContratoHistorico) {		this.codigoContratoHistorico = codigoContratoHistorico;	}	public List<HistoricoEdicoesContrato> getHistoricoEdicoes() {		return historicoEdicoes;	}	public void setHistoricoEdicoes(List<HistoricoEdicoesContrato> historicoEdicoes) {		this.historicoEdicoes = historicoEdicoes;	}	public HistoricoEdicoesContrato getHistoricoEdicao() {		return historicoEdicao;	}	public void setHistoricoEdicao(HistoricoEdicoesContrato historicoEdicao) {		this.historicoEdicao = historicoEdicao;	}}